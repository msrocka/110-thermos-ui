#+TITLE: Thermos UI

See LICENSE for licensing information.

THERMOS as a whole is split into a few parts, which see:

- https://github.com/cse-bristol/clj-lp :: a library for driving MIP solvers from clojure
- https://github.com/cse-bristol/110-thermos-models :: a library containing most of the core THERMOS MIP / heuristic models
- https://github.com/cse-bristol/110-thermos-importer :: a library containing utility code, mostly for processing GIS data
- https://github.com/cse-bristol/110-thermos-ui :: this repository, containing the THERMOS frontend application.

  A certain amount of model code is also in this repository, since the thermos-models interfaces accept a boiled down version in which some simplifications have been made already. In particular, the rules for heat losses, pipe diameters, and pipe costs are all found in here.

* This repository

The THERMOS web interface.

Builds using scripts in build-src.

* How to build

- For development
  
  1. You need a postgis server to run against.
     There is a nix expression to set one up in [[./dev/pg-server.nix]]
  2. You need a JDK
  3. You need clojure command line tools

  Then you can run

  #+BEGIN_EXAMPLE sh
  clojure -Adev:server:client dev
  #+END_EXAMPLE

  or
  
  #+BEGIN_EXAMPLE sh
  clojure -Adev:server:client dev --emacs
  #+END_EXAMPLE

  if you want to develop in emacs with cider.

  If you want to hack on the dependencies locally as well, you can check them out into ../, and do

  #+BEGIN_EXAMPLE sh
  clojure -Adev:server:client:local-deps dev
  #+END_EXAMPLE

- For production
  
  #+BEGIN_EXAMPLE sh
  clojure -M:dev:server:client pkg
  #+END_EXAMPLE

  Should spit out a jar in target/

* Configuration

The application has a few config settings, defaults in ~resources/config.edn~.
These are settable through the environment.
